/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * User login endpoint
         * @description Authenticate user with provided credentials
         */
        post: operations["loginUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register new user
         * @description Create a new account for the user
         */
        post: operations["registerUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh tokens
         * @description Generate new access token using refresh token
         */
        post: operations["refreshToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/catalog": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получение списка товаров с возможностью фильтрации */
        get: {
            parameters: {
                query?: {
                    /** @description Фильтрация по тегам */
                    tags?: string[];
                    /** @description Фильтрация по цвету */
                    colors?: string[];
                    /** @description Фильтрация по формату */
                    formats?: string[];
                    /** @description Минимальная цена */
                    min_price?: number;
                    /** @description Максимальная цена */
                    max_price?: number;
                    /** @description Способ сортировки результатов (по возрастанию цены, убыванию цены, популярности) */
                    sort_by?: "price_asc" | "price_desc" | "popularity";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: never;
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payment-and-delivery": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Создание нового заказа */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["order_request"];
                };
            };
            responses: {
                /** @description Новый заказ успешно создан */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["order_response"];
                    };
                };
                /** @description Некорректные входные данные */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error_response"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/about-us": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получение информации о магазине */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Успешно возвращена информация о магазине */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["about_us_info"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contacts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получение контактной информации магазина */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Успешно возвращены контактные данные */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["contact_info"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/faq": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получение списка часто задаваемых вопросов */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Успешно возвращён список FAQ */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["faq"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cart": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получение текущего содержимого корзины */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Успешно возвращено содержимое корзины */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cart_item"][];
                    };
                };
            };
        };
        put?: never;
        /** Добавление товара в корзину */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["card_add_request"];
                };
            };
            responses: {
                /** @description Товар успешно добавлен в корзину */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cart_item"];
                    };
                };
                /** @description Некорректные входные данные */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error_response"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/favorites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получение списка избранных товаров */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Успешно возвращён список избранных товаров */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["favorite_item"][];
                    };
                };
            };
        };
        put?: never;
        /** Добавление товара в избранные */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["favorite_add_request"];
                };
            };
            responses: {
                /** @description Товар успешно добавлен в избранные */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["favorite_item"];
                    };
                };
                /** @description Некорректные входные данные */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error_response"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Flower: components["schemas"]["flower"];
        OrderRequest: components["schemas"]["order_request"];
        OrderResponse: components["schemas"]["order_response"];
        AboutUsInfo: components["schemas"]["about_us_info"];
        ContactInfo: components["schemas"]["contact_info"];
        FAQItem: components["schemas"]["faq"];
        CartItem: components["schemas"]["cart_item"];
        FavoriteItem: components["schemas"]["favorite_item"];
        CartAddRequest: components["schemas"]["card_add_request"];
        FavoriteAddRequest: components["schemas"]["favorite_add_request"];
        ErrorResponse: components["schemas"]["error_response"];
        order_request: {
            /**
             * Format: int64
             * @example 1
             */
            user_id?: number;
            /** @example [
             *       1,
             *       2
             *     ] */
            flower_ids?: number[];
            /** @example Самовывоз */
            delivery_method?: string;
            /** @example Онлайн-платеж */
            payment_method?: string;
        };
        order_response: {
            /**
             * Format: int64
             * @example 1001
             */
            order_number?: number;
            /**
             * Format: float
             * @example 3000
             */
            total_price?: number;
            /**
             * Format: date-time
             * @example 2023-10-07T12:00:00Z
             */
            created_at?: string;
        };
        error_response: {
            /** @example 400 */
            error_code?: number;
            /** @example Недопустимые значения параметра. */
            message?: string;
        };
        about_us_info: {
            /** @example Мы продаем свежие цветы высокого качества. */
            about_text?: string;
        };
        contact_info: {
            /** @example +7 (495) 123-45-67 */
            phone?: string;
            /**
             * Format: email
             * @example info@example.com
             */
            email?: string;
            /** @example г. Москва, Красносельская улица, дом 1 */
            address?: string;
        };
        faq: {
            /** @example Сколько живут срезанные цветы? */
            question?: string;
            /** @example При правильном уходе цветы могут радовать вас неделю-две. */
            answer?: string;
        };
        cart_item: {
            /**
             * Format: int64
             * @example 1
             */
            product_id?: number;
            /**
             * Format: int64
             * @example 3
             */
            quantity?: number;
            /**
             * Format: float
             * @example 4500
             */
            subtotal?: number;
        };
        card_add_request: {
            /**
             * Format: int64
             * @example 1
             */
            product_id?: number;
            /**
             * Format: int64
             * @example 3
             */
            quantity?: number;
        };
        favorite_item: {
            /**
             * Format: int64
             * @example 1
             */
            product_id?: number;
            /**
             * Format: date-time
             * @example 2023-10-07T12:00:00Z
             */
            added_date?: string;
        };
        favorite_add_request: {
            /**
             * Format: int64
             * @example 1
             */
            product_id?: number;
        };
        flower: {
            /**
             * Format: int64
             * @example 1
             */
            id?: number;
            /** @example Розы красные */
            name?: string;
            /**
             * Format: float
             * @example 1500
             */
            price?: number;
            /**
             * Format: uri
             * @example https://example.com/image.png
             */
            image_url?: string;
            /** @example [
             *       "букеты",
             *       "розы"
             *     ] */
            tag_list?: string[];
            /** @example Красный */
            color?: string;
            /** @example Бутон */
            format?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    loginUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    username: string;
                    password: string;
                };
            };
        };
        responses: {
            /** @description Successful authentication */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        access_token?: string;
                        refresh_token?: string;
                    };
                };
            };
            /** @description Invalid credentials */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                    };
                };
            };
        };
    };
    registerUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    username: string;
                    email: string;
                    password: string;
                };
            };
        };
        responses: {
            /** @description Successfully registered */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                    };
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                    };
                };
            };
        };
    };
    refreshToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    refresh_token: string;
                };
            };
        };
        responses: {
            /** @description Tokens refreshed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        access_token?: string;
                    };
                };
            };
            /** @description Invalid or expired refresh token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                    };
                };
            };
        };
    };
}
